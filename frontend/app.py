import streamlit as st
import requests

API_BASE_URL = "http://localhost:8001"

st.set_page_config(
    page_title="Interface pour API CodeGen",
    page_icon="ü§ñ",
    layout="wide"
)

# --- BARRE DE NAVIGATION LAT√âRALE ---
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "Choisissez une page :",
    ("Chat Coder", "Tableau de Bord")
)

# --- AFFICHAGE DE LA PAGE S√âLECTIONN√âE ---

if page == "Chat Coder":
    st.title("ü§ñ Interface de compl√©tion de code")

    # Zone de texte pour le prompt de l'utilisateur
    prompt_text = st.text_area("Entrez votre instruction ou votre d√©but de code ici :", height=150)

    if st.button("G√©n√©rer la suite"):
        if prompt_text:
            with st.spinner("Chargement de la r√©ponse..."):
                # 1. Pr√©parer la requ√™te pour l'API
                payload = {
                    "messages": [
                        {
                            "role": "user",
                            "content": prompt_text
                        }
                    ]
                }
                api_endpoint = f"{API_BASE_URL}/api/v1/chat/completions"

                try:
                    # 2. Envoyer la requ√™te √† l'API FastAPI
                    response = requests.post(api_endpoint, json=payload)
                    response.raise_for_status()  # L√®ve une exception pour les codes d'erreur HTTP (4xx ou 5xx)

                    # 3. Traiter la r√©ponse
                    data = response.json()

                    # Extraire le contenu du message de l'assistant
                    if data.get("choices") and len(data["choices"]) > 0:
                        assistant_message = data["choices"][0]["message"]["content"]

                        st.subheader("R√©ponse du mod√®le :")
                        st.code(assistant_message, language='python', line_numbers=True)
                    else:
                        st.error("La r√©ponse de l'API est dans un format inattendu.")
                        st.json(data)

                except requests.exceptions.RequestException as e:
                    st.error(f"Erreur de connexion √† l'API : {e}")
                    st.info("Assurez-vous que le serveur FastAPI (main.py) est bien lanc√© sur l'adresse http://127.0.0.1:8001")
                except Exception as e:
                    st.error(f"Une erreur inattendue est survenue : {e}")


elif page == "Tableau de Bord":
    st.title("üìä Tableau de Bord de l'API")
    st.caption("Surveillance en temps r√©el de l'√©tat et des m√©triques de l'API.")

    # --- HEALTH CHECK ---
    st.subheader("V√©rification de l'√©tat (Health Check)")
    status_placeholder = st.empty()

    def check_health():
        try:
            response = requests.get(f"{API_BASE_URL}/health", timeout=5)
            if response.status_code == 200 and response.json().get("status") == "ok":
                status_placeholder.success("‚úÖ API en ligne et fonctionnelle.")
            else:
                status_placeholder.warning(f"‚ö†Ô∏è L'API a r√©pondu avec un statut inattendu : {response.status_code}")
        except requests.exceptions.RequestException:
            status_placeholder.error("‚ùå API hors ligne ou inaccessible.")

    if st.button("V√©rifier le statut de l'API"):
        check_health()

    st.divider()

    # --- AFFICHAGE DES M√âTRIQUES ---
    st.subheader("M√©triques de Performance")

    if 'metrics' not in st.session_state:
        st.session_state.metrics = {"requests_total": 0, "errors_total": 0, "average_response_time_ms": 0.0}

    def get_metrics():
        try:
            response = requests.get(f"{API_BASE_URL}/metrics", timeout=5)
            response.raise_for_status()
            st.session_state.metrics = response.json()
        except requests.exceptions.RequestException:
            st.error("Impossible de r√©cup√©rer les m√©triques.")

    col1, col2, col3 = st.columns(3)
    col1.metric("Requ√™tes Totales", st.session_state.metrics["requests_total"])
    col2.metric("Erreurs Serveur", st.session_state.metrics["errors_total"])
    col3.metric("Temps de R√©ponse Moyen", f"{st.session_state.metrics['average_response_time_ms']:.2f} ms")

    if st.button("Rafra√Æchir les m√©triques"):
        get_metrics()

